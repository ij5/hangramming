use std::str::FromStr;
use crate::ast::{OpCode, Expr};

#[LALR]
grammar;

pub Program: Box<Expr> = {
  Comparison,
};

Comparison: Box<Expr> = {
  Expr,
};

Expr: Box<Expr> = {
  <l:Expr> <o:ExprOp> <r:Factor> => Box::new(Expr::Op(l, o, r)),
  Factor,
};

Factor: Box<Expr> = {
  <l:Factor> <o:FactorOp> <r:Term> => Box::new(Expr::Op(l, o, r)),
  Term,
};

Term: Box<Expr> = {
  <n:Int> => Box::new(Expr::Int(n)),
  <n:Float> => Box::new(Expr::Float(n)),
  "(" <e:Expr> ")" => e,
};

ExprOp: OpCode = {
  "더하기" => OpCode::Add,
  "빼기" => OpCode::Sub,
};


FactorOp: OpCode = {
  "곱하기" => OpCode::Mul,
  "나누기" => OpCode::Div,
};

Identifier: String = <s:r"[_a-zA-Zㄱ-ㅎ가-힣][_a-zA-Z0-9ㄱ-ㅎ가-힣]*"> => String::from(s);

Int: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();

Float: f32 = <s:r"[0-9]+\.[0-9]+"> => f32::from_str(s).unwrap();

Comment: () = {
  <c:r"//[^\n\r]*[\n\r]*"> => {},
  <c:r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/"> => {},
};